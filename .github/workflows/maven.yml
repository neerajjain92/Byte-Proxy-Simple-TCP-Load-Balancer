# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Start backend servers
      run: |
        docker-compose build
        docker-compose up -d

    - name: Wait for servers to start
      run: sleep 10

    - name: Verify backend servers are running
      run: |
        curl http://localhost:8081
        curl http://localhost:8082
        curl http://localhost:8083
    
    - name: Run Load Balancer
      run: java -jar target/Byte-Proxy-Simple-TCP-Load-Balancer-1.0-SNAPSHOT.jar &

    - name: Test load balancing with dynamic verification
      run: |
        # Array to store curl responses
        declare -a responses
        expected_pattern=("server1" "server2" "server3")
        
        # Collect 9 responses (3 complete round robin cycles)
        for i in {1..9}; do
            response=$(curl -s http://localhost:9090)
            responses+=("$response")
            echo "Request $i: $response"
        done
        
        # Verify round robin pattern
        failed=false
        for i in "${!responses[@]}"; do
            expected_server="${expected_pattern[$((i % 3))]}"
            if [[ "${responses[$i]}" != *"$expected_server"* ]]; then
                echo "❌ Pattern mismatch at request $((i+1)). Expected $expected_server"
                failed=true
                break
            fi
        done
        
        if [ "$failed" = true ]; then
            echo "❌ Round-robin pattern verification failed"
            exit 1
        else
            echo "✅ Round-robin pattern verified for ${#responses[@]} requests"
        fi

    - name:  Stop backend servers
      run: docker-compose down
